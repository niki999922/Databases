1.1 (0 удалилось)

delete from Students
where StudentId not in (
        select Students.StudentId
        from 
            Students
            natural join Plan
            left join Marks on Marks.StudentId = Students.StudentId and Marks.CourseId = Plan.CourseId
        where 
            Mark is null or Mark < 60
    );


1.2. (1 удалилось)

delete from Students
where StudentId in (
        select Students.StudentId
        from
            Students
            natural join Plan
            left join Marks on Marks.StudentId = Students.StudentId and Marks.CourseId = Plan.CourseId 
        where Mark is null or Mark < 60
        group by Students.StudentId
        having count(Plan.CourseId) >= 3
    );


1.3 (1 удалилось)

delete from Groups
where GroupId not in (
        select GroupId
        from Students
    );


2.1

create view Losers as
select 
    Students.StudentId, count(Plan.CourseId) as AmountDebts
from
    Students 
    natural join Plan
    left join Marks on Students.StudentId = Marks.StudentId and Plan.CourseId = Marks.CourseId
where
    Mark is null or Mark < 60
group by Students.StudentId;



2.2

create table LoserT as
select 
    Students.StudentId, count(Plan.CourseId) as AmountDebts
from
    Students 
    natural join Plan
    left join Marks on Students.StudentId = Marks.StudentId and Plan.CourseId = Marks.CourseId
where
    Mark is null or Mark < 60
group by Students.StudentId;

create or replace function pull_marks() returns trigger as $LosersTrigger$
    begin
        delete from LoserT;
        insert into LoserT (
            select 
                Students.StudentId, count(Plan.CourseId) as AmountDebts
            from
                Students 
                natural join Plan
                left join Marks on Students.StudentId = Marks.StudentId and Plan.CourseId = Marks.CourseId
            where
                Mark is null or Mark < 60
            group by Students.StudentId
        );
        return new;
    end;
$LosersTrigger$ LANGUAGE plpgsql;

create trigger LosersTrigger
after insert or update or delete on Marks
for each statement execute procedure pull_marks();



2.3

drop trigger if exists LosersTrigger on Marks;

2.4



3.1

Набор предметов, которые изучает студент, определяется группой. В таблице Plan распределение по предметам идёт по группам. Соответсвенно такая проверка будет происходить автоматически.


3.2

create or replace function check_marks() returns trigger as $LosersTrig$
    begin
        if (new.Mark is null) then
            return old;
        elsif (old.Mark is null) then
            return new;
        elsif (new.Mark < old.Mark) then
            return old;
        elsif (new.Mark >= old.Mark) then
            return new;
        end if;
        return null;
    end;
$LosersTrig$ LANGUAGE plpgsql;

create trigger LosersTrig
after update on Marks
for each row execute procedure check_marks();

